dist: xenial
language: d

git:
  depth: 50

matrix:
  include:
    - os: linux
      arch: arm64
      d: ldc-beta
      env: LLVM_VERSION=11.0.1 CC=gcc-8 CXX=g++-8 OPTS="-DBUILD_LTO_LIBS=ON -DCMAKE_EXE_LINKER_FLAGS=-static-libstdc++ -DJITRT_EXTRA_LDFLAGS=-static-libstdc++ -DLDC_INSTALL_LLVM_RUNTIME_LIBS_ARCH=aarch64"

cache:
  directories:
    - llvm-11.0.1

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-8
      - gdb
      - ninja-build
      - p7zip-full

# Download & extract prebuilt LLVM if not in cache
before_install:
  - nproc
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then free; fi
  - export LLVM_ROOT_DIR="$PWD/llvm-$LLVM_VERSION"
  - |
    if [ ! -e "$LLVM_ROOT_DIR/bin/llvm-config" ]; then
      llvm_url="https://github.com/ldc-developers/llvm-project/releases/download/ldc-v$LLVM_VERSION/llvm-$LLVM_VERSION-linux-aarch64-withAsserts.tar.xz"
      wget -nv -O llvm.tar.xz $llvm_url
      mkdir -p $LLVM_ROOT_DIR
      tar -xf llvm.tar.xz --strip 1 -C $LLVM_ROOT_DIR
      rm llvm.tar.xz
    fi

install:
  # Install lit
  - python3 -m pip install --user lit
  - python3 -c "import lit.main; lit.main.main();" --version . | head -n 1

script:
  - unset LD_LIBRARY_PATH
  - cmake --version
  - ninja --version
  # Build bootstrap LDC
  - mkdir bootstrap-ldc
  - cd bootstrap-ldc
  - |
    DFLAGS='-linker=bfd' cmake -G Ninja .. \
      -DCMAKE_BUILD_TYPE=Release \
      -DLLVM_ROOT_DIR="$LLVM_ROOT_DIR" \
      -DBUILD_SHARED_LIBS=OFF \
      -DCOMPILE_D_MODULES_SEPARATELY=ON \
      -DCOMPILE_ALL_D_FILES_AT_ONCE=OFF \
      -DADDITIONAL_DEFAULT_LDC_SWITCHES=' "-linker=bfd",' \
      -DLDC_LINK_MANUALLY=OFF
  - ninja -j8
  - bin/ldc2 -version || exit 1
  - cd ..
  # Build LDC & LDC D unittests & defaultlib unittest runners
  - mkdir build
  - cd build
  - |
    set -x
    installDir="$(dirname "$PWD")/install"
    cmake -G Ninja .. \
      -DCMAKE_BUILD_TYPE=Release \
      -DLLVM_ROOT_DIR="$LLVM_ROOT_DIR" \
      -DD_COMPILER="$PWD/../bootstrap-ldc/bin/ldmd2" \
      -DCMAKE_INSTALL_PREFIX="$installDir" \
      -DINCLUDE_INSTALL_DIR="$installDir/import" \
      -DCOMPILE_ALL_D_FILES_AT_ONCE=OFF \
      -DADDITIONAL_DEFAULT_LDC_SWITCHES=' "-linker=bfd",' \
      -DLDC_LINK_MANUALLY=OFF \
      $OPTS
    set +x
  - |
    # Work around out-of-memory errors - retry with decreasing jobs
    targets='all ldc2-unittest all-test-runners'
    ninja -j8 -k0 $targets || \
      ninja -j8 -k0 $targets || \
      ninja -j2 -k0 $targets || \
      ninja -j1 $targets
  - bin/ldc2 -version || exit 1
  # Run LDC D unittests
  - ctest --output-on-failure -R "ldc2-unittest"
  # FIXME: all gdb tests fail and are disabled
  - rm ../tests/debuginfo/*_gdb.d
  - rm ../tests/d2/dmd-testsuite/runnable/b18504.d
  # Run LIT testsuite
  # FIXME: don't ignore errors
  - ctest -V -R "lit-tests" || true
  # Run DMD testsuite
  - DMD_TESTSUITE_MAKE_ARGS="-j8 GDB_FLAGS=OFF" ctest -V -R "dmd-testsuite"
  # Run defaultlib unittests & druntime integration tests
  # FIXME: don't exclude hanging core.thread.fiber & don't ignore errors
  - ctest -j8 --output-on-failure -E "dmd-testsuite|lit-tests|ldc2-unittest|^core.thread.fiber($|-)" || true
  # Install LDC & make portable
  - ninja install > /dev/null
  - cd ..
  - perl -pi -e "s?$PWD/install/?%%ldcbinarypath%%/../?g" install/etc/ldc2.conf
  - perl -pi -e 's? "-linker=bfd",??g' install/etc/ldc2.conf
  - cat install/etc/ldc2.conf
  - cp LICENSE install
  - cp packaging/README install
  # Now rename the installation dir to test portability
  - mv install installed
  # Run hello-world integration test with shared libs
  - echo 'void main() { import std.stdio; writefln("Hello world, %d bits", size_t.sizeof * 8); }' > hello.d
  - installed/bin/ldc2 hello.d -of=hello -link-defaultlib-shared
  - ./hello
  # Run hello-world integration test with LTO
  # FIXME: these broke with LLVM 8 (failing assertions)
  #- installed/bin/ldc2 hello.d -of=hello_thin -flto=thin -defaultlib=phobos2-ldc-lto,druntime-ldc-lto
  #- ./hello_thin
  #- installed/bin/ldc2 hello.d -of=hello_full -flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto
  #- ./hello_full
  # Run dynamic-compile integration test
  - installed/bin/ldc2 -enable-dynamic-compile -run tests/dynamiccompile/array.d
  # Build & copy dub
  - export DMD="$PWD/installed/bin/ldmd2"
  - git clone --recursive https://github.com/dlang/dub.git
  - cd dub
  - git checkout "$(cat ../packaging/dub_version)"
  - $DMD -run build.d -O -w -linkonce-templates
  - cp bin/dub ../installed/bin
  - cd ..
  - installed/bin/dub --version
  # Build & copy dlang tools
  - git clone --recursive https://github.com/dlang/tools.git dlang-tools
  - cd dlang-tools
  - git checkout "$(cat ../packaging/dlang-tools_version)"
  - mkdir bin
  - |
    $DMD -w -de -dip1000 rdmd.d -of=bin/rdmd &
    $DMD -w -de -dip1000 ddemangle.d -of=bin/ddemangle &
    $DMD -w -de -dip1000 DustMite/dustmite.d DustMite/splitter.d DustMite/polyhash.d -of=bin/dustmite &
    wait
  - cp bin/{rdmd,ddemangle,dustmite} ../installed/bin
  - cd ..
  # Pack installation dir
  - |
    if [[ "$TRAVIS_TAG" != "" ]]; then
      artifactID=${TRAVIS_TAG:1}
    else
      artifactID=${TRAVIS_COMMIT:0:8}
    fi
    artifactName=ldc2-$artifactID-linux-aarch64
    mv installed $artifactName
    artifact=$artifactName.tar.xz
    tar -cf - $artifactName | 7za a $artifact -si -txz -mx9
    ls -l $artifact
  # Upload to GitHub release (only for commits on the master branch and tags)
  - |
    if [[ "$TRAVIS_TAG" != "" ]]; then
      tools/upload-to-github.sh $TRAVIS_TAG ldc2-*.tar.xz
    elif [[ "$TRAVIS_PULL_REQUEST" = "false" && "$TRAVIS_BRANCH" = "master" ]]; then
      tools/upload-to-github.sh CI ldc2-*.tar.xz
    fi

after_success:
  - |
    if [[ "$OPTS" == *-DTEST_COVERAGE?ON* ]]; then
      coveralls -e runtime -e tests -e vcbuild --gcov gcov-4.9 --gcov-options '\-lp' > /dev/null 2>&1
    fi

notifications:
  email:
    recipients:
      - "digitalmars-d-ldc@puremagic.com"
    on_success: never
    on_failure: change
  irc:
    channels:
      - "irc.freenode.org#ldc"
    on_success: always
    on_failure: always
    use_notice: false
    skip_join: true
